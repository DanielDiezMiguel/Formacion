version: "3.3"
services:
  back-empresa:
    build: .
    ports:
      - 8090:8090
    networks:
      - mynetwork
#    links:
#      - mongo
#      - zookeeper
#      - kafka

  mongo:
    image: mongo
    ports:
      - 9001:27017
    networks:
      - mynetwork
    environment:
      - MONGO_INITDB_ROOT_USERNAME=daniel
      - MONGO_INITDB_ROOT_PASSWORD=Dds9cP4zlMMIEgGQ
    volumes:
      - mongo-data:/data/db
networks:
  mynetwork:
volumes:
  mongo-data:
#  zookeeper:
#    image: wurstmeister/zookeeper
#    ports:
#      - 2181:2181
#    restart: unless-stopped
#
#  kafka:
#    build: .
#    ports:
#      - 9092
#    environment:
#      DOCKER_API_VERSION: 1.22
#      KAFKA_ADVERTISED_HOST_NAME: 192.168.99.100
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    restart: unless-stopped

#  zookeeper:
#    image: confluentinc/cp-zookeeper:latest
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    ports:
#      - 22181:2181
#  kafka:
#    image: confluentinc/cp-kafka:latest
#    depends_on:
#      - zookeeper
#    ports:
#      - 29092:29092
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
